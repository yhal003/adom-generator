-- Necklace of the Eye v7.6 roguelike frontend
-- Copyright (C) 2010-2014 Zeno Rogue, see noteye.noe for details

-- contains functions for running the game

-- the main loop

appactive = true
mouse_inside = true
mousepressed = false

-- FPS calculation and control

function noteyesleep(t)
  handleviewspeed()
  fps.sleeptime = fps.sleeptime + math.floor(t)
  sleep(t)
  uisleep2()
  end

fps = {}

function fps_init()
  fps.frames = 0
  fps.start = getticks()
  fps.sleeptime = 0
  fps.totaltime = 0
  fps.totaltimev = nil
  fps.laststart = nil
  fps.laststop = nil
  end

noteye_config_variable("maxframe", 999999, "framerate limit")
noteye_config_variable("maxcpu", 80, "CPU usage limit")

function frameheader()
  menuy = 12
  scrwrite(IMG, 1, 1, "Framerate statistics: \v7 (since the last time in NotEye menu)", Font, vgaget(10))
  if fps.frames > 0 and fps.stop > fps.start and fps.totaltime > 0 then

    local cputime = fps.totaltimev or fps.totaltime
    
    local s = "rendering: \ve"..cputime.."\vp"
    if fps.sleeptime > 0 then
      s = s..", sleep: \ve"..fps.sleeptime.."\vp"
      end
    if fps.totaltimev and fps.totaltime > fps.totaltimev then
      s = s..", vsync: \ve"..fps.totaltime-fps.totaltimev.."\vp"
      end
    local other = (fps.stop - fps.start) - fps.totaltime - fps.sleeptime
    if other > 0 then
      s = s..", other: \ve"..other.."\vp"
      end
    
    scrwrite(IMG, 1, 3, 
      "total time elapsed: \ve"..(fps.stop - fps.start).."\vp ms", Font, vgaget(7)
      )

    scrwrite(IMG, 3, 4, s, Font, vgaget(7)
      )

    scrwrite(IMG, 1, 5, 
      "frames drawn since the last menu: \ve"..fps.frames, Font, vgaget(7)
      )
    
    scrwrite(IMG, 1, 6, 
      "total CPU percentage spent rendering: \ve"..string.format("%.2f", 100*(fps.totaltimev or fps.totaltime)/(fps.stop - fps.start)).."\vp%", Font, vgaget(7)
      )
    scrwrite(IMG, 1, 7, 
      "framerate: \ve"..string.format("%.1f", 1000 * fps.frames/(fps.stop - fps.start)).."\vp fps"..
        " (maximum: \ve"..string.format("%.1f", 1000 * fps.frames / (fps.totaltimev or fps.totaltime)).."\vp fps)"
        , Font, vgaget(7)
      )
    scrwrite(IMG, 1, 9, 
      "You can reduce the framerate to reduce the CPU usage to conserve power.", Font, vgaget(7)
      )
    scrwrite(IMG, 1, 10, 
      "You can also switch renderers or turn VSync on/off.", Font, vgaget(7)
      )
    end
  end

framemenu = {}

addtomenu(mainmenu, "c", writechoice("control framerate and CPU usage"),
  function()
    menuexecute(framemenu, frameheader)
    end
  )

addtomenu(framemenu, "f", writechoicef(function()
    if maxframe >= 999999 then
      return "limit the framerate (current: \veunlimited\vp)" 
    else
      return "limit the framerate (current: \ve"..maxframe.."\vp fps)" 
    end end),
  function()
    if maxframe == 999999 then maxframe = 30 end
    ret = askstr("" .. maxframe, "enter the max frame rate:")
    if tonumber(ret) then maxframe = tonumber(ret) else maxframe = 999999 end
    if maxframe <= 0 then maxframe = 999999 end
    pickframerate(maxframe)
    return 1
    end
  )

function pickframerate(framerate)
  picknumber("maxframe", framerate)
  end

addtomenu(framemenu, "p", writechoicef(function()
    if maxcpu >= 100 then
      return "limit the CPU percentage (current: \veunlimited\vp)" 
    else
      return "limit the CPU percentage (current: \ve"..maxcpu.."\vp%)" 
    end end),
  function()
    ret = askstr("" .. maxcpu, "enter the max CPU percentage:")
    if tonumber(ret) then maxcpu = tonumber(ret) 
    else maxcpu = 100
    end
    if maxcpu < 1 then maxcpu = 1 end
    if maxcpu > 100 then maxcpu = 100 end
    picknumber("maxcpu", maxcpu)
    return 1
    end
  )

if renderermenu then
  addtomenu(framemenu, "r", writechoice("select the renderer and flags used by NotEye"),
    function()
      menuexecute(renderermenu, renderheader)
      end
    )
  end

-- scheduling drawing frames, and other scheduled tasks

scheduledTasks = {}

function scheduleTask(time, action)
  local t = getticks() + time
  local old = scheduledTasks[t]
  if old then 
    scheduledTasks[t] = function() old() action() end
  else
    scheduledTasks[t] = action
    end
  end

-- event handlers and auxiliary functions; keys and mouse are handled later

evhandlers = {}

function callscheduledtasks()
  for k,v in pairs(scheduledTasks) do
    if k < fps.laststart then
      scheduledTasks[k] = nil
      v()
      end
    end
  end

function calcfps()
  fps.laststop = getticks()
  fps.lastframe = fps.laststop - fps.laststart
  fps.totaltime = fps.totaltime + fps.lastframe
  
  if rendererVsync and lastrender then
    fps.laststopv = lastrender
    fps.lastframev = fps.laststopv - fps.laststart
    fps.totaltimev = (fps.totaltimev or 0) + fps.lastframev
    end

  fps.frames = fps.frames + 1
  end

function savecpu()
  local st = 0
  
  if maxcpu < 100 then
    
    if rendererVsync and havegfx then
      st = fps.lastframev * (100-maxcpu) / maxcpu + lastrender - getticks()
  
    else
      st = fps.lastframe * (100-maxcpu) / maxcpu
      end

    -- do not go below 1 fps
    if st > 1000 then st = 1000 end
    end
  
  if maxframe < 1000 then
    local t = 1000/maxframe - fps.lastframe
    if t > st then st = t end
    end
  
  if st > 0 then
    noteyesleep(st)
    end
  end
  
evhandlers[0] = function(ev)
  if VIEW and viewpause <= 0 then
    if neof(VIEW) then
      delete(VIEW)
      VIEW = nil
      finishviewer()
      localmessage("recording finished")
    else
      readdata(VIEW, true, true)
      end
  elseif noteye_pcall("checkstreams", 1, false, checkstreams) then
  else
    -- print(addindent().."getticks")
    fps.laststart = getticks()
    noteye_pcall("callscheduledtasks", 1, nil, callscheduledtasks)
    isactive = false
    noteye_pcall("copymap", 2, nil, copymap)
    noteye_pcall("drawandrefresh", 2, nil, drawandrefresh)
    noteye_pcall("checkmusic", 1, nil, checkmusic)
    noteye_pcall("calcfps", 1, nil, calcfps)
    -- print(addindent().."uisleep2")
    uisleep2()
    -- print(addindent().."savecpu")
    savecpu()
    end
  end

function uisleep2()
  if threaded then
    -- print(addindent().."UI coroutine yields.")
    uisleep()
    -- print(addindent().."UI coroutine is resumed.")
    end
  end

evhandlers[evKeyUp] = handlekeyevent
evhandlers[evKeyDown] = handlekeyevent
evhandlers[evTextInput] = handlekeyevent
evhandlers[evKeyConsole] = handlekeyevent
evhandlers[evMouseUp] = function(ev) handlemouse(ev) end
evhandlers[evMouseDown] = function(ev) handlemouse(ev) end
evhandlers[evMouseMotion] = function(ev) handlemouse(ev) end
evhandlers[evMouseWheel] = function(ev) handlemouse(ev) end

evhandlers[evBell] = function(ev)
  if not SndBell then
    SndBell  = loadsound(sounddir.."rune.ogg")
    end
  playsound(SndBell, volsound)
  end

evhandlers[evQuit] = function(ev)
  if VIEW then
    delete(VIEW)
    VIEW = nil
    end
  if SERVER then
    delete(SERVER)
    SERVER = nil
    end
  sendquit()
  end

evhandlers[evWindowEvent] = function(ev)

  local w = SDL_WINDOWEVENT
  
  if ev.subtype == w.RESIZED then
    resizewindow(ev.data1, ev.data2)
    end
  
  if ev.subtype == w.MOVED then
    -- print("window moved to "..(ev.data1)..","..(ev.data2))
    pickvector("windowpos", V(ev.data1, ev.data2))
    end
  
  if ev.subtype == w.EXPOSED then
    updscr()
    end
  
  if ev.subtype == w.ENTER then
    mouse_inside = true
    end
  
  if ev.subtype == w.LEAVE then
    mouse_inside = false
    mousepos = nil
    end
  
  if ev.subtype == w.FOCUS_GAINED then
    appactive = true
    end
    
  if ev.subtype == w.FOCUS_LOST then
    appactive = false
    stopmusic()
    end

  end

evhandlers[evProcScreen] = function(ev)
  isactive = true
  if P == LUAPROCESS then setcursor(luag.cursor)
  elseif P then setcursor(proccur(P)) end
  copymap()
  backup_process_screen()
  broadcast(sendscreen)
  broadcast(nflush)
  end

evhandlers[evProcQuit] = function(ev)
  EXIT = ev.exitcode
  stoploop = true
  return 0
  end

function joywrapper(ev) return handlejoy(ev) end

evhandlers[evJoyUp] = joywrapper
evhandlers[evJoyDown] = joywrapper
evhandlers[evJoyAxis] = joywrapper
evhandlers[evJoyBall] = joywrapper
evhandlers[evJoyHat] = joywrapper

function mainloopcyc()
  inmenu = nil
  -- print(addindent().."getevent")
  local ev = getevent()
  
  local handler = evhandlers[ev.type]
  
  if not handler then return 1 end
  
  -- print(addindent().."calling the handler (type="..(ev.type)..")")
  return handler(ev) or 1
  end

calldepth = 0
max_noteye_nesting = 20

function noteye_callui()
  -- print(addindent().."reentrant main loop")
  if threaded then
    threaded = false
    local v = mainloopcyc()
    threaded = true
    return v
    end
  if calldepth >= max_noteye_nesting then
    error "NotEye UI nesting detected"
    end
  calldepth = calldepth + 1
  local v = mainloopcyc()
  calldepth = calldepth - 1
  return v
  end

function mainloop()
  while mainloopcyc() > 0 and not stoploop do
    -- print(addindent().."looping")
    end
  end

-- == mouse handling ==

-- minimovable == 1: minimap is movable, but is not moving currently
-- minimovable == 2: minimap is moving currently
-- minimovable == 3: we are centering the big map based on the minimap
minimovable = 1

minimoved = false

function pickminipos(x, y)
  cfgscripts.minipos = function(file)
    file:write("pickminipos("..x..","..y..")\n")
    end
  minimoved = true
  D.cmini = {top = V(x,y)}
  end

function minileftclick(ev)
  V.be(ev)
  if inrect(ev, cmini) then
    local v = minipixeltoprocess(ev)
    if v then 
      if mode == modeFPP then
        fpplookat = v 
      else
        mapcenter = v 
        scrolltoplayer = false
        end
      minimovable = 3
      end
    end
  end

function moveminimap(ev)

  -- simulate the old SDL
  if ev.type == evMouseWheel then
    if ev.dy > 0 then 
      ev = V.be({type = evMouseDown, button = 4, x = ev.x, y = ev.y})
    elseif ev.dy < 0 then 
      ev = V.be({type = evMouseDown, button = 5, x = ev.x, y = ev.y})
      end
    end

  if mapon and cmini and (minimovable==1 or minimovable == 4) and ev.type == evMouseDown then
    if cmini and cmini.top and cmini.bot and inrect(ev, cmini) then
      if ev.button == 4 or ev.button == 5 then
        local d = ev.button == 4 and 1 or (-1)
        if ctrlpressed() then
          minimapsize.x = minimapsize.x+d
          D.cmini = nil
          if shiftpressed() then
            minimapsize.y = minimapsize.y+d
            end
        elseif shiftpressed() then
          minimapsize.y = minimapsize.y+d
          D.cmini = nil
        else
          local v = minipixeltoprocess(ev)
          if v then
            movetowards(ev, v, vectodir(v-playerpos-0.5, 0.8))
            minimovable = 4
            end
          end
      elseif ev.button == 2 and minimode ~= 0 and not midclicksavedmode then
        midclicksavedmode = mode
        mode = minimode
        if mode == modeBlock then mode = modeMini end
        minimode = 0
      elseif ev.button == 3 then
        if minimoved then
          minimoved = false
          cmini = nil
          cfgscripts.minipos = nil
        else
          minimovable = 2
          minimoved = true
          maprel = ev-cmini.top
          end
      elseif ev.button == 1 then
        minileftclick(ev)
        end
      return true
      end

  elseif ev.type == evMouseUp and midclicksavedmode and ev.button == 2 then
    if mode == modeMini then mode = modeBlock end
    minimode = mode
    mode = midclicksavedmode
    midclicksavedmode = nil
    return true
  
  elseif minimovable == 4 and ev.type == evMouseMotion then
    if not inrect(ev, cmini) then
      minimovable = 1
      end
    return true
  
  elseif minimovable == 2 then
    local mp = ev - maprel
    pickminipos(mp.x, mp.y)
    if ev.type == evMouseUp then minimovable = 1 end
    return true

  elseif minimovable == 3 then
    minileftclick(ev)
    if ev.type == evMouseUp then 
      minimovable = 1 
      fpplookat = nil
      end
    return true
    end

  return false
  end

-- actually also called on ev.button == 1

function handlemouse(ev)
  lastmouseeventtime = getticks()
  
  if ev.type == evMouseWheel then
    if mousepos then
      ev.x = mousepos.x
      ev.y = mousepos.y
      V.be(ev)
    else 
      return
      end
  
  else
    mousepos = V.be(ev)
    end

  if ev.type == evMouseMotion then
    lastmm = ev
    end
  
  if ev.type == evMouseDown then
    mousepressed = true
    end
  
  if ev.type == evMouseUp then
    mousepressed = false
    end
  
  return 
    handlemousewindows(ev)
    or handlemouse2(ev)
  end

function handlemousewindows(ev)
  if currentmodal and currentmodal.handlemouse then
    r = currentmodal.handlemouse(ev)
    if r then return r end
    end  
  return moveminimap(ev)
  end

function mousesendsvector()
  return false
  end

function movetowards(ev, whereto, direction)
  if mousesendsvector() then
    sendvector(V.floor(whereto) - playerpos - map.top)

  elseif direction then

    if ev.type == evMouseWheel and ev.dy > 0 and direction ~= -1 then
      direction = (direction+4) % 8
      end
    
    if direction ~= -1 then
      nsendkey2(dirkeys[direction], evKeyBothText)
    elseif dirkeys[8] then
      nsendkey2(dirkeys[8], evKeyBothText)
      end
    end  
  end

function handlemouse2(ev)

  if ev.type == evMouseMotion then
    scrollmanual = true

  elseif ev.type == evMouseWheel and mapon then
  
    if ctrlpressed() then
      if ev.dy > 0 then
        if tilesize.x < maparea.size.y/3 then zoomtiles(2, ev) end
        end
      if ev.dy < 0 then
        if not (tilesize * map.size < maparea.size) then zoomtiles(.5, ev) end
        end
      ctrlzoomingactive = true
      scrolltoplayer = false
      return true
      end
    
    movetowards(ev, pixeltoprocess(ev), pixeltodir(ev))
    return true

  elseif ev.type == evMouseDown and mapon then
    movetowards(ev, pixeltoprocess(ev), pixeltodir(ev))
    return true
    end
  end

-- == start the game process ==

function caller(name, dir, uname, wname)
  if manualcall and linux then
    return "sh -l"
  elseif manualcall then
    return "cmd"
  elseif linux then
    return "sh "..noteyedir.."caller.sh "..dir.." "..uname.." \""..name.."\""
  else
    return ".\\caller.bat "..dir.." "..wname.." \""..name.."\""
    end
  end

function caller3(name, x)
  return caller(name, x, x, x)
  end

function rungamex(cmdline)
  P = newprocess(S, Font, cmdline)
  end

function rungame2(cmdline)

  backwardcompatible()
  prepareconsole()
  stoploop = false
  pcursor = V(0,0)
  
  autostreaming()
  
  if not viewmode then
    rungamex(cmdline)
    end

  fps_init()

  mainloop()
  
  stopstreaming()

  if havemain then createmain() end
  if P == LUAPROCESS then P = nil end
  if P then delete(P); P = nil end
  savegameconfigonexit()
  end

function rungame(cmdline)

  loadgameconfig()
  if justrefreshing then
    return
    end
  
  fps_init()
  if luagame and not viewmode then
  
    function rungamex(cmdline)
      P = LUAPROCESS
      luagame()
      end
    
    rungame2(cmdline)

  elseif threaded and not viewmode then

    function rungamex(cmdline)

      P = internal(S, Font, cmdline)
      end
    
    function rg()
      rungame2(cmdline)
      end
  
    uicreate(rg)
  
  else
    rungame2(cmdline)
    end
  end

function sendquit()
  -- for libtcod as libnoteye user (not officially released)
  if vialibtcod then
    quitlibtcod()
    end
  end

-- for Lua games:

-- if P equals LUAPROCESS, then the game is written in Lua

LUAPROCESS = -1

luag = {kq = {}, kqfirst = 0, kqlast = 0, cursor = V(11,11)}

luag.dxy = { V(1,-1), V(0,-1), V(-1,-1), V(-1,0), V(-1,1), V(0,1), V(1,1), V(0,0) }
luag.dxy[0] = V(1,0)

luag.symboltodxy = {}

-- for c=0,7 do
--   luag.symboltodxy[keytabs.numpad[c]] = luag.dxy[c]
--   luag.symboltodxy[keytabs.arrow[c]] = luag.dxy[c]
--   end

-- luag.symboltodxy[keytabs.numpad[8]] = luag.dxy[8]

function luag.refresh()
  evhandlers[evProcScreen]()
  mainloopcyc()
  end

function luag.sendkey(ev)
  luag.kq[luag.kqlast] = ev
  luag.kqlast = luag.kqlast+1
  end

function luag.getch(releases)
  if luag.kqfirst < luag.kqlast then
    local ret = luag.kq[luag.kqfirst]
    luag.kq[luag.kqfirst] = nil
    luag.kqfirst = luag.kqfirst+1
    if ret.type == 2 and not releases then return end
    if ret.chr then ret.char = string.char(ret.chr) end
    ret.dxy = luag.symboltodxy[ret.symbol]
    return ret
    end
  end
